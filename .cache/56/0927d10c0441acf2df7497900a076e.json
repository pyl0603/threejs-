{"id":"../node_modules/three/examples/jsm/shaders/FXAAShader.js","dependencies":[{"name":"C:\\Users\\pyl\\Desktop\\粮仓案例\\package.json","includedInParent":true,"mtime":1687789481347},{"name":"C:\\Users\\pyl\\Desktop\\粮仓案例\\node_modules\\three\\package.json","includedInParent":true,"mtime":1686144196502},{"name":"three","loc":{"line":3,"column":7,"index":25},"parent":"C:\\Users\\pyl\\Desktop\\粮仓案例\\node_modules\\three\\examples\\jsm\\shaders\\FXAAShader.js","resolved":"C:\\Users\\pyl\\Desktop\\粮仓案例\\node_modules\\three\\build\\three.module.js"}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.FXAAShader = void 0;\nvar _three = require(\"three\");\n/**\n * NVIDIA FXAA by Timothy Lottes\n * https://developer.download.nvidia.com/assets/gamedev/files/sdk/11/FXAA_WhitePaper.pdf\n * - WebGL port by @supereggbert\n * http://www.glge.org/demos/fxaa/\n * Further improved by Daniel Sturk\n */\n\nvar FXAAShader = {\n  uniforms: {\n    'tDiffuse': {\n      value: null\n    },\n    'resolution': {\n      value: new _three.Vector2(1 / 1024, 1 / 512)\n    }\n  },\n  vertexShader: /* glsl */\"\\n\\n\\t\\tvarying vec2 vUv;\\n\\n\\t\\tvoid main() {\\n\\n\\t\\t\\tvUv = uv;\\n\\t\\t\\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\\n\\n\\t\\t}\",\n  fragmentShader: \"\\n\\tprecision highp float;\\n\\n\\tuniform sampler2D tDiffuse;\\n\\n\\tuniform vec2 resolution;\\n\\n\\tvarying vec2 vUv;\\n\\n\\t// FXAA 3.11 implementation by NVIDIA, ported to WebGL by Agost Biro (biro@archilogic.com)\\n\\n\\t//----------------------------------------------------------------------------------\\n\\t// File:        es3-keplerFXAAassetsshaders/FXAA_DefaultES.frag\\n\\t// SDK Version: v3.00\\n\\t// Email:       gameworks@nvidia.com\\n\\t// Site:        http://developer.nvidia.com/\\n\\t//\\n\\t// Copyright (c) 2014-2015, NVIDIA CORPORATION. All rights reserved.\\n\\t//\\n\\t// Redistribution and use in source and binary forms, with or without\\n\\t// modification, are permitted provided that the following conditions\\n\\t// are met:\\n\\t//  * Redistributions of source code must retain the above copyright\\n\\t//    notice, this list of conditions and the following disclaimer.\\n\\t//  * Redistributions in binary form must reproduce the above copyright\\n\\t//    notice, this list of conditions and the following disclaimer in the\\n\\t//    documentation and/or other materials provided with the distribution.\\n\\t//  * Neither the name of NVIDIA CORPORATION nor the names of its\\n\\t//    contributors may be used to endorse or promote products derived\\n\\t//    from this software without specific prior written permission.\\n\\t//\\n\\t// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS ''AS IS'' AND ANY\\n\\t// EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\\n\\t// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\\n\\t// PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR\\n\\t// CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,\\n\\t// EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,\\n\\t// PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\\n\\t// PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY\\n\\t// OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\\n\\t// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\\n\\t// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\\n\\t//\\n\\t//----------------------------------------------------------------------------------\\n\\n\\t#ifndef FXAA_DISCARD\\n\\t\\t\\t//\\n\\t\\t\\t// Only valid for PC OpenGL currently.\\n\\t\\t\\t// Probably will not work when FXAA_GREEN_AS_LUMA = 1.\\n\\t\\t\\t//\\n\\t\\t\\t// 1 = Use discard on pixels which don't need AA.\\n\\t\\t\\t//     For APIs which enable concurrent TEX+ROP from same surface.\\n\\t\\t\\t// 0 = Return unchanged color on pixels which don't need AA.\\n\\t\\t\\t//\\n\\t\\t\\t#define FXAA_DISCARD 0\\n\\t#endif\\n\\n\\t/*--------------------------------------------------------------------------*/\\n\\t#define FxaaTexTop(t, p) texture2D(t, p, -100.0)\\n\\t#define FxaaTexOff(t, p, o, r) texture2D(t, p + (o * r), -100.0)\\n\\t/*--------------------------------------------------------------------------*/\\n\\n\\t#define NUM_SAMPLES 5\\n\\n\\t// assumes colors have premultipliedAlpha, so that the calculated color contrast is scaled by alpha\\n\\tfloat contrast( vec4 a, vec4 b ) {\\n\\t\\t\\tvec4 diff = abs( a - b );\\n\\t\\t\\treturn max( max( max( diff.r, diff.g ), diff.b ), diff.a );\\n\\t}\\n\\n\\t/*============================================================================\\n\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tFXAA3 QUALITY - PC\\n\\n\\t============================================================================*/\\n\\n\\t/*--------------------------------------------------------------------------*/\\n\\tvec4 FxaaPixelShader(\\n\\t\\t\\tvec2 posM,\\n\\t\\t\\tsampler2D tex,\\n\\t\\t\\tvec2 fxaaQualityRcpFrame,\\n\\t\\t\\tfloat fxaaQualityEdgeThreshold,\\n\\t\\t\\tfloat fxaaQualityinvEdgeThreshold\\n\\t) {\\n\\t\\t\\tvec4 rgbaM = FxaaTexTop(tex, posM);\\n\\t\\t\\tvec4 rgbaS = FxaaTexOff(tex, posM, vec2( 0.0, 1.0), fxaaQualityRcpFrame.xy);\\n\\t\\t\\tvec4 rgbaE = FxaaTexOff(tex, posM, vec2( 1.0, 0.0), fxaaQualityRcpFrame.xy);\\n\\t\\t\\tvec4 rgbaN = FxaaTexOff(tex, posM, vec2( 0.0,-1.0), fxaaQualityRcpFrame.xy);\\n\\t\\t\\tvec4 rgbaW = FxaaTexOff(tex, posM, vec2(-1.0, 0.0), fxaaQualityRcpFrame.xy);\\n\\t\\t\\t// . S .\\n\\t\\t\\t// W M E\\n\\t\\t\\t// . N .\\n\\n\\t\\t\\tbool earlyExit = max( max( max(\\n\\t\\t\\t\\t\\tcontrast( rgbaM, rgbaN ),\\n\\t\\t\\t\\t\\tcontrast( rgbaM, rgbaS ) ),\\n\\t\\t\\t\\t\\tcontrast( rgbaM, rgbaE ) ),\\n\\t\\t\\t\\t\\tcontrast( rgbaM, rgbaW ) )\\n\\t\\t\\t\\t\\t< fxaaQualityEdgeThreshold;\\n\\t\\t\\t// . 0 .\\n\\t\\t\\t// 0 0 0\\n\\t\\t\\t// . 0 .\\n\\n\\t\\t\\t#if (FXAA_DISCARD == 1)\\n\\t\\t\\t\\t\\tif(earlyExit) FxaaDiscard;\\n\\t\\t\\t#else\\n\\t\\t\\t\\t\\tif(earlyExit) return rgbaM;\\n\\t\\t\\t#endif\\n\\n\\t\\t\\tfloat contrastN = contrast( rgbaM, rgbaN );\\n\\t\\t\\tfloat contrastS = contrast( rgbaM, rgbaS );\\n\\t\\t\\tfloat contrastE = contrast( rgbaM, rgbaE );\\n\\t\\t\\tfloat contrastW = contrast( rgbaM, rgbaW );\\n\\n\\t\\t\\tfloat relativeVContrast = ( contrastN + contrastS ) - ( contrastE + contrastW );\\n\\t\\t\\trelativeVContrast *= fxaaQualityinvEdgeThreshold;\\n\\n\\t\\t\\tbool horzSpan = relativeVContrast > 0.;\\n\\t\\t\\t// . 1 .\\n\\t\\t\\t// 0 0 0\\n\\t\\t\\t// . 1 .\\n\\n\\t\\t\\t// 45 deg edge detection and corners of objects, aka V/H contrast is too similar\\n\\t\\t\\tif( abs( relativeVContrast ) < .3 ) {\\n\\t\\t\\t\\t\\t// locate the edge\\n\\t\\t\\t\\t\\tvec2 dirToEdge;\\n\\t\\t\\t\\t\\tdirToEdge.x = contrastE > contrastW ? 1. : -1.;\\n\\t\\t\\t\\t\\tdirToEdge.y = contrastS > contrastN ? 1. : -1.;\\n\\t\\t\\t\\t\\t// . 2 .      . 1 .\\n\\t\\t\\t\\t\\t// 1 0 2  ~=  0 0 1\\n\\t\\t\\t\\t\\t// . 1 .      . 0 .\\n\\n\\t\\t\\t\\t\\t// tap 2 pixels and see which ones are \\\"outside\\\" the edge, to\\n\\t\\t\\t\\t\\t// determine if the edge is vertical or horizontal\\n\\n\\t\\t\\t\\t\\tvec4 rgbaAlongH = FxaaTexOff(tex, posM, vec2( dirToEdge.x, -dirToEdge.y ), fxaaQualityRcpFrame.xy);\\n\\t\\t\\t\\t\\tfloat matchAlongH = contrast( rgbaM, rgbaAlongH );\\n\\t\\t\\t\\t\\t// . 1 .\\n\\t\\t\\t\\t\\t// 0 0 1\\n\\t\\t\\t\\t\\t// . 0 H\\n\\n\\t\\t\\t\\t\\tvec4 rgbaAlongV = FxaaTexOff(tex, posM, vec2( -dirToEdge.x, dirToEdge.y ), fxaaQualityRcpFrame.xy);\\n\\t\\t\\t\\t\\tfloat matchAlongV = contrast( rgbaM, rgbaAlongV );\\n\\t\\t\\t\\t\\t// V 1 .\\n\\t\\t\\t\\t\\t// 0 0 1\\n\\t\\t\\t\\t\\t// . 0 .\\n\\n\\t\\t\\t\\t\\trelativeVContrast = matchAlongV - matchAlongH;\\n\\t\\t\\t\\t\\trelativeVContrast *= fxaaQualityinvEdgeThreshold;\\n\\n\\t\\t\\t\\t\\tif( abs( relativeVContrast ) < .3 ) { // 45 deg edge\\n\\t\\t\\t\\t\\t\\t\\t// 1 1 .\\n\\t\\t\\t\\t\\t\\t\\t// 0 0 1\\n\\t\\t\\t\\t\\t\\t\\t// . 0 1\\n\\n\\t\\t\\t\\t\\t\\t\\t// do a simple blur\\n\\t\\t\\t\\t\\t\\t\\treturn mix(\\n\\t\\t\\t\\t\\t\\t\\t\\t\\trgbaM,\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t(rgbaN + rgbaS + rgbaE + rgbaW) * .25,\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t.4\\n\\t\\t\\t\\t\\t\\t\\t);\\n\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t\\thorzSpan = relativeVContrast > 0.;\\n\\t\\t\\t}\\n\\n\\t\\t\\tif(!horzSpan) rgbaN = rgbaW;\\n\\t\\t\\tif(!horzSpan) rgbaS = rgbaE;\\n\\t\\t\\t// . 0 .      1\\n\\t\\t\\t// 1 0 1  ->  0\\n\\t\\t\\t// . 0 .      1\\n\\n\\t\\t\\tbool pairN = contrast( rgbaM, rgbaN ) > contrast( rgbaM, rgbaS );\\n\\t\\t\\tif(!pairN) rgbaN = rgbaS;\\n\\n\\t\\t\\tvec2 offNP;\\n\\t\\t\\toffNP.x = (!horzSpan) ? 0.0 : fxaaQualityRcpFrame.x;\\n\\t\\t\\toffNP.y = ( horzSpan) ? 0.0 : fxaaQualityRcpFrame.y;\\n\\n\\t\\t\\tbool doneN = false;\\n\\t\\t\\tbool doneP = false;\\n\\n\\t\\t\\tfloat nDist = 0.;\\n\\t\\t\\tfloat pDist = 0.;\\n\\n\\t\\t\\tvec2 posN = posM;\\n\\t\\t\\tvec2 posP = posM;\\n\\n\\t\\t\\tint iterationsUsed = 0;\\n\\t\\t\\tint iterationsUsedN = 0;\\n\\t\\t\\tint iterationsUsedP = 0;\\n\\t\\t\\tfor( int i = 0; i < NUM_SAMPLES; i++ ) {\\n\\t\\t\\t\\t\\titerationsUsed = i;\\n\\n\\t\\t\\t\\t\\tfloat increment = float(i + 1);\\n\\n\\t\\t\\t\\t\\tif(!doneN) {\\n\\t\\t\\t\\t\\t\\t\\tnDist += increment;\\n\\t\\t\\t\\t\\t\\t\\tposN = posM + offNP * nDist;\\n\\t\\t\\t\\t\\t\\t\\tvec4 rgbaEndN = FxaaTexTop(tex, posN.xy);\\n\\t\\t\\t\\t\\t\\t\\tdoneN = contrast( rgbaEndN, rgbaM ) > contrast( rgbaEndN, rgbaN );\\n\\t\\t\\t\\t\\t\\t\\titerationsUsedN = i;\\n\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t\\tif(!doneP) {\\n\\t\\t\\t\\t\\t\\t\\tpDist += increment;\\n\\t\\t\\t\\t\\t\\t\\tposP = posM - offNP * pDist;\\n\\t\\t\\t\\t\\t\\t\\tvec4 rgbaEndP = FxaaTexTop(tex, posP.xy);\\n\\t\\t\\t\\t\\t\\t\\tdoneP = contrast( rgbaEndP, rgbaM ) > contrast( rgbaEndP, rgbaN );\\n\\t\\t\\t\\t\\t\\t\\titerationsUsedP = i;\\n\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t\\tif(doneN || doneP) break;\\n\\t\\t\\t}\\n\\n\\n\\t\\t\\tif ( !doneP && !doneN ) return rgbaM; // failed to find end of edge\\n\\n\\t\\t\\tfloat dist = min(\\n\\t\\t\\t\\t\\tdoneN ? float( iterationsUsedN ) / float( NUM_SAMPLES - 1 ) : 1.,\\n\\t\\t\\t\\t\\tdoneP ? float( iterationsUsedP ) / float( NUM_SAMPLES - 1 ) : 1.\\n\\t\\t\\t);\\n\\n\\t\\t\\t// hacky way of reduces blurriness of mostly diagonal edges\\n\\t\\t\\t// but reduces AA quality\\n\\t\\t\\tdist = pow(dist, .5);\\n\\n\\t\\t\\tdist = 1. - dist;\\n\\n\\t\\t\\treturn mix(\\n\\t\\t\\t\\t\\trgbaM,\\n\\t\\t\\t\\t\\trgbaN,\\n\\t\\t\\t\\t\\tdist * .5\\n\\t\\t\\t);\\n\\t}\\n\\n\\tvoid main() {\\n\\t\\t\\tconst float edgeDetectionQuality = .2;\\n\\t\\t\\tconst float invEdgeDetectionQuality = 1. / edgeDetectionQuality;\\n\\n\\t\\t\\tgl_FragColor = FxaaPixelShader(\\n\\t\\t\\t\\t\\tvUv,\\n\\t\\t\\t\\t\\ttDiffuse,\\n\\t\\t\\t\\t\\tresolution,\\n\\t\\t\\t\\t\\tedgeDetectionQuality, // [0,1] contrast needed, otherwise early discard\\n\\t\\t\\t\\t\\tinvEdgeDetectionQuality\\n\\t\\t\\t);\\n\\n\\t}\\n\\t\"\n};\nexports.FXAAShader = FXAAShader;"},"sourceMaps":{"js":{"mappings":[{"generated":{"line":7,"column":0},"source":"../node_modules/three/examples/jsm/shaders/FXAAShader.js","original":{"line":1,"column":0}},{"generated":{"line":7,"column":4},"source":"../node_modules/three/examples/jsm/shaders/FXAAShader.js","original":{"line":1,"column":0},"name":"_three"},{"generated":{"line":7,"column":10},"source":"../node_modules/three/examples/jsm/shaders/FXAAShader.js","original":{"line":1,"column":0}},{"generated":{"line":7,"column":13},"source":"../node_modules/three/examples/jsm/shaders/FXAAShader.js","original":{"line":1,"column":0},"name":"require"},{"generated":{"line":7,"column":20},"source":"../node_modules/three/examples/jsm/shaders/FXAAShader.js","original":{"line":1,"column":0}},{"generated":{"line":8,"column":0},"source":"../node_modules/three/examples/jsm/shaders/FXAAShader.js","original":{"line":5,"column":0}},{"generated":{"line":9,"column":0},"source":"../node_modules/three/examples/jsm/shaders/FXAAShader.js","original":{"line":6,"column":0}},{"generated":{"line":10,"column":0},"source":"../node_modules/three/examples/jsm/shaders/FXAAShader.js","original":{"line":7,"column":0}},{"generated":{"line":11,"column":0},"source":"../node_modules/three/examples/jsm/shaders/FXAAShader.js","original":{"line":8,"column":0}},{"generated":{"line":12,"column":0},"source":"../node_modules/three/examples/jsm/shaders/FXAAShader.js","original":{"line":9,"column":0}},{"generated":{"line":13,"column":0},"source":"../node_modules/three/examples/jsm/shaders/FXAAShader.js","original":{"line":10,"column":0}},{"generated":{"line":14,"column":0},"source":"../node_modules/three/examples/jsm/shaders/FXAAShader.js","original":{"line":11,"column":0}},{"generated":{"line":16,"column":0},"source":"../node_modules/three/examples/jsm/shaders/FXAAShader.js","original":{"line":13,"column":0}},{"generated":{"line":16,"column":4},"source":"../node_modules/three/examples/jsm/shaders/FXAAShader.js","original":{"line":13,"column":6},"name":"FXAAShader"},{"generated":{"line":16,"column":14},"source":"../node_modules/three/examples/jsm/shaders/FXAAShader.js","original":{"line":13,"column":16}},{"generated":{"line":16,"column":17},"source":"../node_modules/three/examples/jsm/shaders/FXAAShader.js","original":{"line":13,"column":19}},{"generated":{"line":17,"column":2},"source":"../node_modules/three/examples/jsm/shaders/FXAAShader.js","original":{"line":15,"column":1},"name":"uniforms"},{"generated":{"line":17,"column":10},"source":"../node_modules/three/examples/jsm/shaders/FXAAShader.js","original":{"line":15,"column":9}},{"generated":{"line":17,"column":12},"source":"../node_modules/three/examples/jsm/shaders/FXAAShader.js","original":{"line":15,"column":11}},{"generated":{"line":18,"column":4},"source":"../node_modules/three/examples/jsm/shaders/FXAAShader.js","original":{"line":17,"column":2}},{"generated":{"line":18,"column":14},"source":"../node_modules/three/examples/jsm/shaders/FXAAShader.js","original":{"line":17,"column":12}},{"generated":{"line":18,"column":16},"source":"../node_modules/three/examples/jsm/shaders/FXAAShader.js","original":{"line":17,"column":14}},{"generated":{"line":19,"column":6},"source":"../node_modules/three/examples/jsm/shaders/FXAAShader.js","original":{"line":17,"column":16},"name":"value"},{"generated":{"line":19,"column":11},"source":"../node_modules/three/examples/jsm/shaders/FXAAShader.js","original":{"line":17,"column":21}},{"generated":{"line":19,"column":13},"source":"../node_modules/three/examples/jsm/shaders/FXAAShader.js","original":{"line":17,"column":23}},{"generated":{"line":20,"column":4},"source":"../node_modules/three/examples/jsm/shaders/FXAAShader.js","original":{"line":17,"column":28}},{"generated":{"line":20,"column":5},"source":"../node_modules/three/examples/jsm/shaders/FXAAShader.js","original":{"line":17,"column":29}},{"generated":{"line":21,"column":4},"source":"../node_modules/three/examples/jsm/shaders/FXAAShader.js","original":{"line":18,"column":2}},{"generated":{"line":21,"column":16},"source":"../node_modules/three/examples/jsm/shaders/FXAAShader.js","original":{"line":18,"column":14}},{"generated":{"line":21,"column":18},"source":"../node_modules/three/examples/jsm/shaders/FXAAShader.js","original":{"line":18,"column":16}},{"generated":{"line":22,"column":6},"source":"../node_modules/three/examples/jsm/shaders/FXAAShader.js","original":{"line":18,"column":18},"name":"value"},{"generated":{"line":22,"column":11},"source":"../node_modules/three/examples/jsm/shaders/FXAAShader.js","original":{"line":18,"column":23}},{"generated":{"line":22,"column":13},"source":"../node_modules/three/examples/jsm/shaders/FXAAShader.js","original":{"line":18,"column":25}},{"generated":{"line":22,"column":17},"source":"../node_modules/three/examples/jsm/shaders/FXAAShader.js","original":{"line":18,"column":29},"name":"Vector2"},{"generated":{"line":22,"column":31},"source":"../node_modules/three/examples/jsm/shaders/FXAAShader.js","original":{"line":18,"column":36}},{"generated":{"line":22,"column":32},"source":"../node_modules/three/examples/jsm/shaders/FXAAShader.js","original":{"line":18,"column":38}},{"generated":{"line":22,"column":33},"source":"../node_modules/three/examples/jsm/shaders/FXAAShader.js","original":{"line":18,"column":39}},{"generated":{"line":22,"column":36},"source":"../node_modules/three/examples/jsm/shaders/FXAAShader.js","original":{"line":18,"column":42}},{"generated":{"line":22,"column":40},"source":"../node_modules/three/examples/jsm/shaders/FXAAShader.js","original":{"line":18,"column":46}},{"generated":{"line":22,"column":42},"source":"../node_modules/three/examples/jsm/shaders/FXAAShader.js","original":{"line":18,"column":48}},{"generated":{"line":22,"column":43},"source":"../node_modules/three/examples/jsm/shaders/FXAAShader.js","original":{"line":18,"column":49}},{"generated":{"line":22,"column":46},"source":"../node_modules/three/examples/jsm/shaders/FXAAShader.js","original":{"line":18,"column":52}},{"generated":{"line":22,"column":49},"source":"../node_modules/three/examples/jsm/shaders/FXAAShader.js","original":{"line":18,"column":56}},{"generated":{"line":23,"column":4},"source":"../node_modules/three/examples/jsm/shaders/FXAAShader.js","original":{"line":18,"column":58}},{"generated":{"line":24,"column":2},"source":"../node_modules/three/examples/jsm/shaders/FXAAShader.js","original":{"line":20,"column":1}},{"generated":{"line":24,"column":3},"source":"../node_modules/three/examples/jsm/shaders/FXAAShader.js","original":{"line":20,"column":2}},{"generated":{"line":25,"column":2},"source":"../node_modules/three/examples/jsm/shaders/FXAAShader.js","original":{"line":22,"column":1},"name":"vertexShader"},{"generated":{"line":25,"column":14},"source":"../node_modules/three/examples/jsm/shaders/FXAAShader.js","original":{"line":22,"column":13}},{"generated":{"line":25,"column":16},"source":"../node_modules/three/examples/jsm/shaders/FXAAShader.js","original":{"line":22,"column":15}},{"generated":{"line":25,"column":183},"source":"../node_modules/three/examples/jsm/shaders/FXAAShader.js","original":{"line":31,"column":4}},{"generated":{"line":26,"column":2},"source":"../node_modules/three/examples/jsm/shaders/FXAAShader.js","original":{"line":33,"column":1},"name":"fragmentShader"},{"generated":{"line":26,"column":16},"source":"../node_modules/three/examples/jsm/shaders/FXAAShader.js","original":{"line":33,"column":15}},{"generated":{"line":27,"column":0},"source":"../node_modules/three/examples/jsm/shaders/FXAAShader.js","original":{"line":284,"column":0}},{"generated":{"line":27,"column":1},"source":"../node_modules/three/examples/jsm/shaders/FXAAShader.js","original":{"line":284,"column":1}},{"generated":{"line":28,"column":0},"source":"../node_modules/three/examples/jsm/shaders/FXAAShader.js","original":{"line":284,"column":2},"name":"exports"},{"generated":{"line":28,"column":7},"source":"../node_modules/three/examples/jsm/shaders/FXAAShader.js","original":{"line":284,"column":2}},{"generated":{"line":28,"column":8},"source":"../node_modules/three/examples/jsm/shaders/FXAAShader.js","original":{"line":284,"column":2},"name":"FXAAShader"},{"generated":{"line":28,"column":18},"source":"../node_modules/three/examples/jsm/shaders/FXAAShader.js","original":{"line":284,"column":2}},{"generated":{"line":28,"column":21},"source":"../node_modules/three/examples/jsm/shaders/FXAAShader.js","original":{"line":284,"column":2},"name":"FXAAShader"},{"generated":{"line":28,"column":31},"source":"../node_modules/three/examples/jsm/shaders/FXAAShader.js","original":{"line":284,"column":2}}],"sources":{"../node_modules/three/examples/jsm/shaders/FXAAShader.js":"import {\n\tVector2\n} from 'three';\n\n/**\n * NVIDIA FXAA by Timothy Lottes\n * https://developer.download.nvidia.com/assets/gamedev/files/sdk/11/FXAA_WhitePaper.pdf\n * - WebGL port by @supereggbert\n * http://www.glge.org/demos/fxaa/\n * Further improved by Daniel Sturk\n */\n\nconst FXAAShader = {\n\n\tuniforms: {\n\n\t\t'tDiffuse': { value: null },\n\t\t'resolution': { value: new Vector2( 1 / 1024, 1 / 512 ) }\n\n\t},\n\n\tvertexShader: /* glsl */`\n\n\t\tvarying vec2 vUv;\n\n\t\tvoid main() {\n\n\t\t\tvUv = uv;\n\t\t\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n\n\t\t}`,\n\n\tfragmentShader: `\n\tprecision highp float;\n\n\tuniform sampler2D tDiffuse;\n\n\tuniform vec2 resolution;\n\n\tvarying vec2 vUv;\n\n\t// FXAA 3.11 implementation by NVIDIA, ported to WebGL by Agost Biro (biro@archilogic.com)\n\n\t//----------------------------------------------------------------------------------\n\t// File:        es3-kepler\\FXAA\\assets\\shaders/FXAA_DefaultES.frag\n\t// SDK Version: v3.00\n\t// Email:       gameworks@nvidia.com\n\t// Site:        http://developer.nvidia.com/\n\t//\n\t// Copyright (c) 2014-2015, NVIDIA CORPORATION. All rights reserved.\n\t//\n\t// Redistribution and use in source and binary forms, with or without\n\t// modification, are permitted provided that the following conditions\n\t// are met:\n\t//  * Redistributions of source code must retain the above copyright\n\t//    notice, this list of conditions and the following disclaimer.\n\t//  * Redistributions in binary form must reproduce the above copyright\n\t//    notice, this list of conditions and the following disclaimer in the\n\t//    documentation and/or other materials provided with the distribution.\n\t//  * Neither the name of NVIDIA CORPORATION nor the names of its\n\t//    contributors may be used to endorse or promote products derived\n\t//    from this software without specific prior written permission.\n\t//\n\t// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS ''AS IS'' AND ANY\n\t// EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n\t// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\n\t// PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR\n\t// CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,\n\t// EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,\n\t// PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n\t// PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY\n\t// OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n\t// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n\t// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\t//\n\t//----------------------------------------------------------------------------------\n\n\t#ifndef FXAA_DISCARD\n\t\t\t//\n\t\t\t// Only valid for PC OpenGL currently.\n\t\t\t// Probably will not work when FXAA_GREEN_AS_LUMA = 1.\n\t\t\t//\n\t\t\t// 1 = Use discard on pixels which don't need AA.\n\t\t\t//     For APIs which enable concurrent TEX+ROP from same surface.\n\t\t\t// 0 = Return unchanged color on pixels which don't need AA.\n\t\t\t//\n\t\t\t#define FXAA_DISCARD 0\n\t#endif\n\n\t/*--------------------------------------------------------------------------*/\n\t#define FxaaTexTop(t, p) texture2D(t, p, -100.0)\n\t#define FxaaTexOff(t, p, o, r) texture2D(t, p + (o * r), -100.0)\n\t/*--------------------------------------------------------------------------*/\n\n\t#define NUM_SAMPLES 5\n\n\t// assumes colors have premultipliedAlpha, so that the calculated color contrast is scaled by alpha\n\tfloat contrast( vec4 a, vec4 b ) {\n\t\t\tvec4 diff = abs( a - b );\n\t\t\treturn max( max( max( diff.r, diff.g ), diff.b ), diff.a );\n\t}\n\n\t/*============================================================================\n\n\t\t\t\t\t\t\t\t\tFXAA3 QUALITY - PC\n\n\t============================================================================*/\n\n\t/*--------------------------------------------------------------------------*/\n\tvec4 FxaaPixelShader(\n\t\t\tvec2 posM,\n\t\t\tsampler2D tex,\n\t\t\tvec2 fxaaQualityRcpFrame,\n\t\t\tfloat fxaaQualityEdgeThreshold,\n\t\t\tfloat fxaaQualityinvEdgeThreshold\n\t) {\n\t\t\tvec4 rgbaM = FxaaTexTop(tex, posM);\n\t\t\tvec4 rgbaS = FxaaTexOff(tex, posM, vec2( 0.0, 1.0), fxaaQualityRcpFrame.xy);\n\t\t\tvec4 rgbaE = FxaaTexOff(tex, posM, vec2( 1.0, 0.0), fxaaQualityRcpFrame.xy);\n\t\t\tvec4 rgbaN = FxaaTexOff(tex, posM, vec2( 0.0,-1.0), fxaaQualityRcpFrame.xy);\n\t\t\tvec4 rgbaW = FxaaTexOff(tex, posM, vec2(-1.0, 0.0), fxaaQualityRcpFrame.xy);\n\t\t\t// . S .\n\t\t\t// W M E\n\t\t\t// . N .\n\n\t\t\tbool earlyExit = max( max( max(\n\t\t\t\t\tcontrast( rgbaM, rgbaN ),\n\t\t\t\t\tcontrast( rgbaM, rgbaS ) ),\n\t\t\t\t\tcontrast( rgbaM, rgbaE ) ),\n\t\t\t\t\tcontrast( rgbaM, rgbaW ) )\n\t\t\t\t\t< fxaaQualityEdgeThreshold;\n\t\t\t// . 0 .\n\t\t\t// 0 0 0\n\t\t\t// . 0 .\n\n\t\t\t#if (FXAA_DISCARD == 1)\n\t\t\t\t\tif(earlyExit) FxaaDiscard;\n\t\t\t#else\n\t\t\t\t\tif(earlyExit) return rgbaM;\n\t\t\t#endif\n\n\t\t\tfloat contrastN = contrast( rgbaM, rgbaN );\n\t\t\tfloat contrastS = contrast( rgbaM, rgbaS );\n\t\t\tfloat contrastE = contrast( rgbaM, rgbaE );\n\t\t\tfloat contrastW = contrast( rgbaM, rgbaW );\n\n\t\t\tfloat relativeVContrast = ( contrastN + contrastS ) - ( contrastE + contrastW );\n\t\t\trelativeVContrast *= fxaaQualityinvEdgeThreshold;\n\n\t\t\tbool horzSpan = relativeVContrast > 0.;\n\t\t\t// . 1 .\n\t\t\t// 0 0 0\n\t\t\t// . 1 .\n\n\t\t\t// 45 deg edge detection and corners of objects, aka V/H contrast is too similar\n\t\t\tif( abs( relativeVContrast ) < .3 ) {\n\t\t\t\t\t// locate the edge\n\t\t\t\t\tvec2 dirToEdge;\n\t\t\t\t\tdirToEdge.x = contrastE > contrastW ? 1. : -1.;\n\t\t\t\t\tdirToEdge.y = contrastS > contrastN ? 1. : -1.;\n\t\t\t\t\t// . 2 .      . 1 .\n\t\t\t\t\t// 1 0 2  ~=  0 0 1\n\t\t\t\t\t// . 1 .      . 0 .\n\n\t\t\t\t\t// tap 2 pixels and see which ones are \"outside\" the edge, to\n\t\t\t\t\t// determine if the edge is vertical or horizontal\n\n\t\t\t\t\tvec4 rgbaAlongH = FxaaTexOff(tex, posM, vec2( dirToEdge.x, -dirToEdge.y ), fxaaQualityRcpFrame.xy);\n\t\t\t\t\tfloat matchAlongH = contrast( rgbaM, rgbaAlongH );\n\t\t\t\t\t// . 1 .\n\t\t\t\t\t// 0 0 1\n\t\t\t\t\t// . 0 H\n\n\t\t\t\t\tvec4 rgbaAlongV = FxaaTexOff(tex, posM, vec2( -dirToEdge.x, dirToEdge.y ), fxaaQualityRcpFrame.xy);\n\t\t\t\t\tfloat matchAlongV = contrast( rgbaM, rgbaAlongV );\n\t\t\t\t\t// V 1 .\n\t\t\t\t\t// 0 0 1\n\t\t\t\t\t// . 0 .\n\n\t\t\t\t\trelativeVContrast = matchAlongV - matchAlongH;\n\t\t\t\t\trelativeVContrast *= fxaaQualityinvEdgeThreshold;\n\n\t\t\t\t\tif( abs( relativeVContrast ) < .3 ) { // 45 deg edge\n\t\t\t\t\t\t\t// 1 1 .\n\t\t\t\t\t\t\t// 0 0 1\n\t\t\t\t\t\t\t// . 0 1\n\n\t\t\t\t\t\t\t// do a simple blur\n\t\t\t\t\t\t\treturn mix(\n\t\t\t\t\t\t\t\t\trgbaM,\n\t\t\t\t\t\t\t\t\t(rgbaN + rgbaS + rgbaE + rgbaW) * .25,\n\t\t\t\t\t\t\t\t\t.4\n\t\t\t\t\t\t\t);\n\t\t\t\t\t}\n\n\t\t\t\t\thorzSpan = relativeVContrast > 0.;\n\t\t\t}\n\n\t\t\tif(!horzSpan) rgbaN = rgbaW;\n\t\t\tif(!horzSpan) rgbaS = rgbaE;\n\t\t\t// . 0 .      1\n\t\t\t// 1 0 1  ->  0\n\t\t\t// . 0 .      1\n\n\t\t\tbool pairN = contrast( rgbaM, rgbaN ) > contrast( rgbaM, rgbaS );\n\t\t\tif(!pairN) rgbaN = rgbaS;\n\n\t\t\tvec2 offNP;\n\t\t\toffNP.x = (!horzSpan) ? 0.0 : fxaaQualityRcpFrame.x;\n\t\t\toffNP.y = ( horzSpan) ? 0.0 : fxaaQualityRcpFrame.y;\n\n\t\t\tbool doneN = false;\n\t\t\tbool doneP = false;\n\n\t\t\tfloat nDist = 0.;\n\t\t\tfloat pDist = 0.;\n\n\t\t\tvec2 posN = posM;\n\t\t\tvec2 posP = posM;\n\n\t\t\tint iterationsUsed = 0;\n\t\t\tint iterationsUsedN = 0;\n\t\t\tint iterationsUsedP = 0;\n\t\t\tfor( int i = 0; i < NUM_SAMPLES; i++ ) {\n\t\t\t\t\titerationsUsed = i;\n\n\t\t\t\t\tfloat increment = float(i + 1);\n\n\t\t\t\t\tif(!doneN) {\n\t\t\t\t\t\t\tnDist += increment;\n\t\t\t\t\t\t\tposN = posM + offNP * nDist;\n\t\t\t\t\t\t\tvec4 rgbaEndN = FxaaTexTop(tex, posN.xy);\n\t\t\t\t\t\t\tdoneN = contrast( rgbaEndN, rgbaM ) > contrast( rgbaEndN, rgbaN );\n\t\t\t\t\t\t\titerationsUsedN = i;\n\t\t\t\t\t}\n\n\t\t\t\t\tif(!doneP) {\n\t\t\t\t\t\t\tpDist += increment;\n\t\t\t\t\t\t\tposP = posM - offNP * pDist;\n\t\t\t\t\t\t\tvec4 rgbaEndP = FxaaTexTop(tex, posP.xy);\n\t\t\t\t\t\t\tdoneP = contrast( rgbaEndP, rgbaM ) > contrast( rgbaEndP, rgbaN );\n\t\t\t\t\t\t\titerationsUsedP = i;\n\t\t\t\t\t}\n\n\t\t\t\t\tif(doneN || doneP) break;\n\t\t\t}\n\n\n\t\t\tif ( !doneP && !doneN ) return rgbaM; // failed to find end of edge\n\n\t\t\tfloat dist = min(\n\t\t\t\t\tdoneN ? float( iterationsUsedN ) / float( NUM_SAMPLES - 1 ) : 1.,\n\t\t\t\t\tdoneP ? float( iterationsUsedP ) / float( NUM_SAMPLES - 1 ) : 1.\n\t\t\t);\n\n\t\t\t// hacky way of reduces blurriness of mostly diagonal edges\n\t\t\t// but reduces AA quality\n\t\t\tdist = pow(dist, .5);\n\n\t\t\tdist = 1. - dist;\n\n\t\t\treturn mix(\n\t\t\t\t\trgbaM,\n\t\t\t\t\trgbaN,\n\t\t\t\t\tdist * .5\n\t\t\t);\n\t}\n\n\tvoid main() {\n\t\t\tconst float edgeDetectionQuality = .2;\n\t\t\tconst float invEdgeDetectionQuality = 1. / edgeDetectionQuality;\n\n\t\t\tgl_FragColor = FxaaPixelShader(\n\t\t\t\t\tvUv,\n\t\t\t\t\ttDiffuse,\n\t\t\t\t\tresolution,\n\t\t\t\t\tedgeDetectionQuality, // [0,1] contrast needed, otherwise early discard\n\t\t\t\t\tinvEdgeDetectionQuality\n\t\t\t);\n\n\t}\n\t`\n\n};\n\nexport { FXAAShader };\n"},"lineCount":null}},"error":null,"hash":"fa9ef46af388db4a61a00878702b61c1","cacheData":{"env":{}}}